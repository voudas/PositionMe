Index: app/src/main/java/com/openpositioning/PositionMe/fragments/StartLocationFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/openpositioning/PositionMe/fragments/StartLocationFragment.java b/app/src/main/java/com/openpositioning/PositionMe/fragments/StartLocationFragment.java
--- a/app/src/main/java/com/openpositioning/PositionMe/fragments/StartLocationFragment.java	(revision 0fcbf9ce1043521b2b4d17564f8e0c99e053ca7d)
+++ b/app/src/main/java/com/openpositioning/PositionMe/fragments/StartLocationFragment.java	(revision 523091dbd300ce2917b32edb05737d1e1c1d47c2)
@@ -1,5 +1,6 @@
 package com.openpositioning.PositionMe.fragments;
 
+import android.content.DialogInterface;
 import android.os.Bundle;
 import android.view.LayoutInflater;
 import android.view.View;
@@ -8,6 +9,7 @@
 
 import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
+import androidx.appcompat.app.AlertDialog;
 import androidx.appcompat.app.AppCompatActivity;
 import androidx.fragment.app.Fragment;
 import androidx.navigation.NavDirections;
@@ -23,169 +25,120 @@
 import com.openpositioning.PositionMe.R;
 import com.openpositioning.PositionMe.sensors.SensorFusion;
 
-/**
- * A simple {@link Fragment} subclass. The startLocation fragment is displayed before the trajectory
- * recording starts. This fragment displays a map in which the user can adjust their location to
- * correct the PDR when it is complete
- *
- * @see HomeFragment the previous fragment in the nav graph.
- * @see RecordingFragment the next fragment in the nav graph.
- * @see SensorFusion the class containing sensors and recording.
- *
- * @author Virginia Cangelosi
- */
 public class StartLocationFragment extends Fragment {
 
-    //Button to go to next fragment and save the location
     private Button button;
-    //Singleton SensorFusion class which stores data from all sensors
     private SensorFusion sensorFusion = SensorFusion.getInstance();
-    //Google maps LatLong object to pass location to the map
     private LatLng position;
-    //Start position of the user to be stored
     private float[] startPosition = new float[2];
-    //Zoom of google maps
     private float zoom = 19f;
 
+    private final CharSequence[] mapTypes = {"Normal", "Satellite", "Terrain", "Hybrid"};
     private GoogleMap mMap;
 
-    /**
-     * Public Constructor for the class.
-     * Left empty as not required
-     */
     public StartLocationFragment() {
         // Required empty public constructor
     }
 
-    /**
-     * {@inheritDoc}
-     * The map is loaded and configured so that it displays a draggable marker for the start location
-     */
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container,
                              Bundle savedInstanceState) {
-        // Inflate the layout for this fragment
-        ((AppCompatActivity)getActivity()).getSupportActionBar().hide();
         View rootView = inflater.inflate(R.layout.fragment_startlocation, container, false);
+        ((AppCompatActivity)getActivity()).getSupportActionBar().hide();
 
-        //Obtain the start position from the GPS data from the SensorFusion class
         startPosition = sensorFusion.getGNSSLatitude(false);
-        //If not location found zoom the map out
-        if(startPosition[0]==0 && startPosition[1]==0){
+        if(startPosition[0] == 0 && startPosition[1] == 0) {
             zoom = 1f;
         }
-        else {
-            zoom = 19f;
-        }
-        // Initialize map fragment
-        SupportMapFragment supportMapFragment=(SupportMapFragment)
-                getChildFragmentManager().findFragmentById(R.id.startMap);
 
-        // Asynchronous map which can be configured
+        SupportMapFragment supportMapFragment = (SupportMapFragment) getChildFragmentManager().findFragmentById(R.id.startMap);
         supportMapFragment.getMapAsync(new OnMapReadyCallback() {
-            /**
-             * {@inheritDoc}
-             * Controls to allow scrolling, tilting, rotating and a compass view of the
-             * map are enabled. A marker is added to the map with the start position and a marker
-             * drag listener is generated to detect when the marker has moved to obtain the new
-             * location.
-             */
             @Override
-            public void onMapReady(GoogleMap mMap) {
-                mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);
-                mMap.getUiSettings().setCompassEnabled(true);
-                mMap.getUiSettings().setTiltGesturesEnabled(true);
-                mMap.getUiSettings().setRotateGesturesEnabled(true);
-                mMap.getUiSettings().setScrollGesturesEnabled(true);
+            public void onMapReady(GoogleMap googleMap) {
+                mMap = googleMap;
+                configureMap();
+            }
+        });
+
+        return rootView;
+    }
+
+    private void configureMap() {
+        mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);
+        mMap.getUiSettings().setCompassEnabled(true);
+        mMap.getUiSettings().setTiltGesturesEnabled(true);
+        mMap.getUiSettings().setRotateGesturesEnabled(true);
+        mMap.getUiSettings().setScrollGesturesEnabled(true);
 
-                Button switchMapTypeButton = rootView.findViewById(R.id.switchMapTypeButton);
-                switchMapTypeButton.setOnClickListener(new View.OnClickListener() {
-                    @Override
-                    public void onClick(View v) {
-                        if (mMap.getMapType() == GoogleMap.MAP_TYPE_NORMAL) {
-                            mMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);
-                        } else {
-                            mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);
-                        }
-                    }
-                });
-
-                // Add a marker in current GPS location and move the camera
-                position = new LatLng(startPosition[0], startPosition[1]);
-                mMap.addMarker(new MarkerOptions().position(position).title("Start Position")).setDraggable(true);
-                mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(position, zoom ));
+        position = new LatLng(startPosition[0], startPosition[1]);
+        mMap.addMarker(new MarkerOptions().position(position).title("Start Position")).setDraggable(true);
+        mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(position, zoom));
 
-                //Drag listener for the marker to execute when the markers location is changed
-                mMap.setOnMarkerDragListener(new GoogleMap.OnMarkerDragListener()
-                {
-                    /**
-                     * {@inheritDoc}
-                     */
-                    @Override
-                    public void onMarkerDragStart(Marker marker){}
+        mMap.setOnMarkerDragListener(new GoogleMap.OnMarkerDragListener() {
+            @Override
+            public void onMarkerDragStart(Marker marker) {}
 
-                    /**
-                     * {@inheritDoc}
-                     * Updates the start position of the user.
-                     */
-                    @Override
-                    public void onMarkerDragEnd(Marker marker)
-                    {
-                        startPosition[0] = (float) marker.getPosition().latitude;
-                        startPosition[1] = (float) marker.getPosition().longitude;
-                    }
+            @Override
+            public void onMarkerDragEnd(Marker marker) {
+                startPosition[0] = (float) marker.getPosition().latitude;
+                startPosition[1] = (float) marker.getPosition().longitude;
+            }
 
-                    /**
-                     * {@inheritDoc}
-                     */
-                    @Override
-                    public void onMarkerDrag(Marker marker){}
-                });
-            }
-        });
-        return rootView;
+            @Override
+            public void onMarkerDrag(Marker marker) {}
+        });
     }
 
-    /**
-     * {@inheritDoc}
-     * Button onClick listener enabled to detect when to go to next fragment and start PDR recording.
-     */
     @Override
     public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {
         super.onViewCreated(view, savedInstanceState);
-        // Add button to begin PDR recording and go to recording fragment.
-        this.button = (Button) getView().findViewById(R.id.startLocationDone);
+
+        this.button = view.findViewById(R.id.startLocationDone);
         this.button.setOnClickListener(new View.OnClickListener() {
-            /**
-             * {@inheritDoc}
-             * When button clicked the PDR recording can start and the start position is stored for
-             * the {@link CorrectionFragment} to display. The {@link RecordingFragment} is loaded.
-             */
             @Override
             public void onClick(View view) {
-                // Starts recording data from the sensor fusion
                 sensorFusion.startRecording();
-                // Set the start location obtained
                 sensorFusion.setStartGNSSLatitude(startPosition);
-                // Navigate to the RecordingFragment
                 NavDirections action = StartLocationFragmentDirections.actionStartLocationFragmentToRecordingFragment();
                 Navigation.findNavController(view).navigate(action);
             }
         });
-        // Set the button's click listener in onViewCreated
+
         Button switchMapTypeButton = view.findViewById(R.id.switchMapTypeButton);
         switchMapTypeButton.setOnClickListener(new View.OnClickListener() {
             @Override
             public void onClick(View v) {
-                if (mMap != null) { // Check if mMap is initialized
-                    if (mMap.getMapType() == GoogleMap.MAP_TYPE_NORMAL) {
+                //check if maps are not empty then call the maptype method
+                if (mMap != null) {
+                    showMapTypeSelectionDialog();
+                }
+            }
+        });
+    }
+
+    //method to choose map type
+    private void showMapTypeSelectionDialog() {
+        AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
+        builder.setTitle("Choose map type");
+        builder.setItems(mapTypes, new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+                switch (which) {
+                    case 0:
+                        mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);
+                        break;
+                    case 1:
                         mMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);
-                    } else {
-                        mMap.setMapType(GoogleMap.MAP_TYPE_NORMAL);
-                    }
+                        break;
+                    case 2:
+                        mMap.setMapType(GoogleMap.MAP_TYPE_TERRAIN);
+                        break;
+                    case 3:
+                        mMap.setMapType(GoogleMap.MAP_TYPE_HYBRID);
+                        break;
                 }
             }
         });
+        builder.show();
     }
-
 }
